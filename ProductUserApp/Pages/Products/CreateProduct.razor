@page "/products/create"
@using ProductUserApp.Models
@using ProductUserApp.Services.Interfaces
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IAuthService AuthService

<h3>Crear Producto</h3>

@if (loading)
{
    <p>Cargando...</p>
}
else
{
    <div class="d-flex justify-content-end mt-3">
        <button class="btn btn-primary" @onclick="AddVariation">Agregar Variación</button>
    </div>

    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="productName">Nombre del Producto:</label>
            <InputText id="productName" class="form-control" @bind-Value="product.Nombre" />
        </div>

        <div class="form-group">
            <label for="productDescription">Descripción:</label>
            <InputTextArea id="productDescription" class="form-control" @bind-Value="product.Descripcion" />
        </div>

        <div class="form-group">
            <label for="productImage">Imagen Url:</label>
            <InputTextArea id="productImage" class="form-control" @bind-Value="product.ImagenUrl" />
        </div>

        <h4>Variaciones (Colores y Precios)</h4>
        @foreach (var variation in product.Variaciones)
        {
            <div class="form-group">
                <label for="color">Color:</label>
                <InputText class="form-control" @bind-Value="variation.Color" />

                <label for="price">Precio:</label>
                <InputNumber class="form-control" @bind-Value="variation.Precio" />

                <button class="btn btn-danger mt-2" @onclick="() => RemoveVariation(variation)">Eliminar Variación</button>
            </div>
        }

        <div class="mt-3">
            <button class="btn btn-success" type="submit">Crear Producto</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
        </div>

    </EditForm>

}

@code {
    private Product product = new Product
        {
            Variaciones = new List<ProductVariant> { new ProductVariant() }
        };

    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!(await AuthService.IsInRoleAsync("Admin") || await AuthService.IsInRoleAsync("Seller")))
        {
            Navigation.NavigateTo("/unauthorized");
        }
    }

    private void AddVariation()
    {
        product.Variaciones.Add(new ProductVariant());
    }

    private void RemoveVariation(ProductVariant variation)
    {
        product.Variaciones.Remove(variation);
    }

    private async Task HandleValidSubmit()
    {
        loading = true;

        try
        {
            await ProductService.CreateProductAsync(product);
            Navigation.NavigateTo("/products"); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear producto: {ex.Message}");
            loading = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/products");
    }
}
