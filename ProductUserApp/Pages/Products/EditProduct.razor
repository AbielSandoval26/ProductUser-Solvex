@page "/products/edit/{id:int}"
@using ProductUserApp.Models
@using ProductUserApp.Services.Interfaces
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject INotificationService NotificationService
@inject IAuthService AuthService

<h3>Editar Producto</h3>

@if (loading)
{
    <p>Cargando...</p>
}
else if (product == null)
{
    <p>Error: No se pudo cargar el producto.</p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="productName">Nombre del Producto:</label>
            <InputText id="productName" class="form-control" @bind-Value="product.Nombre" />
        </div>

        <div class="form-group">
            <label for="productDescription">Descripción:</label>
            <InputTextArea id="productDescription" class="form-control" @bind-Value="product.Descripcion" />
        </div>

        <div class="form-group">
            <label for="productImage">Imagen Url:</label>
            <InputTextArea id="productImage" class="form-control" @bind-Value="product.ImagenUrl" />
        </div>

        <h4>Variaciones (Colores y Precios)</h4>
        @foreach (var variation in product.Variaciones)
        {
            <div class="form-group">
                <label for="color">Color:</label>
                <InputText class="form-control" @bind-Value="variation.Color" />

                <label for="price">Precio:</label>
                <InputNumber class="form-control" @bind-Value="variation.Precio" />

                <button class="btn btn-danger mt-2" @onclick="() => RemoveVariation(variation)">Eliminar Variación</button>
            </div>
        }

        <button class="btn btn-primary mt-3" @onclick="AddVariation">Agregar Variación</button>

        <div class="mt-3">
            <button class="btn btn-success" type="submit">Guardar Cambios</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    private Product? product = null; 
    private bool loading = true;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!(await AuthService.IsInRoleAsync("Admin") || await AuthService.IsInRoleAsync("Seller")))
            {
                Navigation.NavigateTo("/unauthorized");
                return;
            }

            product = await ProductService.GetProductByIdAsync(Id);

            if (product == null)
            {
                NotificationService.ShowError("No se pudo encontrar el producto.");
                Navigation.NavigateTo("/products");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Ocurrió un error al cargar el producto.");
            Console.WriteLine(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private void AddVariation()
    {
        if (product != null)
        {
            product.Variaciones.Add(new ProductVariant());
        }
    }

    private void RemoveVariation(ProductVariant variation)
    {
        if (product != null)
        {
            product.Variaciones.Remove(variation);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (product == null) return;

        loading = true;

        try
        {
            await ProductService.UpdateProductAsync(product.Id, product);
            NotificationService.ShowSuccess("Producto actualizado con éxito.");
            Navigation.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error al actualizar el producto.");
            Console.WriteLine(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/products");
    }
}
